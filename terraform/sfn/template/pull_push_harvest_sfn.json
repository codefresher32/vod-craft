{
  "StartAt": "Add service name",
  "States": {
    "Add service name": {
      "Type": "Pass",
      "Next": "Live streaming enabled?",
      "ResultPath": "$.serviceName",
      "Result": "live-stream-pull-push-harvest"
    },
    "Live streaming enabled?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.live",
          "BooleanEquals": true,
          "Next": "Validate Live Stream Parameters"
        }
      ],
      "Default": "live2VOD enabled?"
    },
    "Validate Live Stream Parameters": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            { "Variable": "$.contentId", "IsPresent": false },
            { "Variable": "$.liveEventDuration", "IsPresent": false },
            { "Variable": "$.sourceHlsUrl", "IsPresent": false },
            { "Variable": "$.mpChannelId", "IsPresent": false }
          ],
          "Next": "Validation Failed For Live Stream"
        }
      ],
      "Default": "Live stream pull push"
    },
    "Validation Failed For Live Stream": {
      "Type": "Pass",
      "Result": {
        "message": "Missing required parameters: Ensure contentId, liveEventDuration, sourceHlsUrl, and mpChannelId are provided."
      },
      "ResultPath": "$.error",
      "Next": "Fail execution"
    },
    "Live stream pull push": {
      "Type": "Task",
      "Resource": "arn:aws:states:::batch:submitJob.sync",
      "Parameters": {
        "JobQueue": "${pull_push_job_queue}",
        "JobDefinition": "${pull_push_job_definition}",
        "Parameters": {
          "contentId.$": "$.contentId",
          "liveEventDuration.$": "$.liveEventDuration",
          "sourceHlsUrl.$": "$.sourceHlsUrl",
          "mpChannelId.$": "$.mpChannelId"
        },
        "ContainerOverrides": {
          "Environment": [
            {
              "Name": "LIVE_MP_CHANNEL_NAME",
              "Value.$": "$.mpChannelId"
            },
            {
              "Name": "LIVE_SOURCE_HLS_URL",
              "Value.$": "$.sourceHlsUrl"
            },
            {
              "Name": "LIVE_EVENT_DURATION",
              "Value.$": "$.liveEventDuration"
            }
          ]
        },
        "JobName.$": "$.contentId"
      },
      "Next": "live2VOD enabled?",
      "ResultPath": "$.batchJobResult"
    },
    "live2VOD enabled?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.live2VOD",
          "BooleanEquals": true,
          "Next": "Validate Harvest Job Parameters"
        }
      ],
      "Default": "Success"
    },
    "Validate Harvest Job Parameters": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            { "Variable": "$.tenant", "IsPresent": false },
            { "Variable": "$.contentId", "IsPresent": false },
            { "Variable": "$.harvestingStartTimeUtc", "IsPresent": false },
            { "Variable": "$.harvestingEndTimeUtc", "IsPresent": false },
            { "Variable": "$.mpChannelId", "IsPresent": false }
          ],
          "Next": "Validation Failed for Harvest Job"
        }
      ],
      "Default": "Create harvest job"
    },
    "Validation Failed for Harvest Job": {
      "Type": "Pass",
      "Result": {
        "message": "Missing required parameters: Ensure tenant, contentId, harvestingStartTimeUtc, harvestingEndTimeUtc, and mpChannelId are provided for the harvest job."
      },
      "ResultPath": "$.error",
      "Next": "Fail execution"
    },
    "Create harvest job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "ResultPath": "$.harvestJobResult",
      "Parameters": {
        "FunctionName": "${create_harvest_job_lambda}",
        "Payload": {
          "tenant.$": "$.tenant",
          "contentId.$": "$.contentId",
          "harvestingStartTimeUtc.$": "$.harvestingStartTimeUtc",
          "harvestingEndTimeUtc.$": "$.harvestingEndTimeUtc",
          "mpChannelId.$": "$.mpChannelId",
          "taskToken.$": "$$.Task.Token",
          "SFNExecutionArn.$": "$$.Execution.Id"
        }
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error",
          "Next": "Fail execution"
        }
      ],
      "Next": "Success"
    },
    "Fail execution": {
      "Type": "Fail",
      "Error": ".error"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
